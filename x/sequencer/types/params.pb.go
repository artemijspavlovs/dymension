// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/sequencer/params.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
type Params struct {
	// notice_period is the time duration of notice period.
	// notice period is the duration between the unbond request and the actual
	// unbonding starting. the proposer is still bonded during this period.
	NoticePeriod time.Duration `protobuf:"bytes,3,opt,name=notice_period,json=noticePeriod,proto3,stdduration" json:"notice_period"`
	// liveness_slash_min_multiplier multiplies with the tokens of the slashed sequencer to compute the burn amount.
	LivenessSlashMinMultiplier github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=liveness_slash_min_multiplier,json=livenessSlashMinMultiplier,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"liveness_slash_min_multiplier" yaml:"liveness_slash_multiplier"`
	// liveness_slash_min_absolute is the absolute minimum to slash for liveness
	LivenessSlashMinAbsolute types.Coin `protobuf:"bytes,6,opt,name=liveness_slash_min_absolute,json=livenessSlashMinAbsolute,proto3" json:"liveness_slash_min_absolute,omitempty"`
	// how much dishonor a sequencer gains on liveness events (+dishonor)
	DishonorLiveness uint64 `protobuf:"varint,7,opt,name=dishonor_liveness,json=dishonorLiveness,proto3" json:"dishonor_liveness,omitempty"`
	// how much honor a sequencer gains on state updates (-dishonor)
	DishonorStateUpdate uint64 `protobuf:"varint,8,opt,name=dishonor_state_update,json=dishonorStateUpdate,proto3" json:"dishonor_state_update,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_599b0eefba99ee26, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetNoticePeriod() time.Duration {
	if m != nil {
		return m.NoticePeriod
	}
	return 0
}

func (m *Params) GetLivenessSlashMinAbsolute() types.Coin {
	if m != nil {
		return m.LivenessSlashMinAbsolute
	}
	return types.Coin{}
}

func (m *Params) GetDishonorLiveness() uint64 {
	if m != nil {
		return m.DishonorLiveness
	}
	return 0
}

func (m *Params) GetDishonorStateUpdate() uint64 {
	if m != nil {
		return m.DishonorStateUpdate
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "dymensionxyz.dymension.sequencer.Params")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/sequencer/params.proto", fileDescriptor_599b0eefba99ee26)
}

var fileDescriptor_599b0eefba99ee26 = []byte{
	// 482 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x4f, 0x8b, 0xd3, 0x40,
	0x18, 0xc6, 0x33, 0xdb, 0x58, 0x63, 0x54, 0xa8, 0x51, 0x21, 0x56, 0x4c, 0x42, 0x41, 0x29, 0x68,
	0x67, 0xd8, 0x5d, 0xf0, 0xb0, 0x37, 0xeb, 0x1e, 0xa4, 0xb8, 0x50, 0xb2, 0x78, 0xf1, 0x12, 0x26,
	0xc9, 0x98, 0x0e, 0x26, 0x33, 0x31, 0x33, 0x29, 0x1b, 0xbf, 0x80, 0x57, 0x2f, 0xc2, 0x1e, 0xf7,
	0xe3, 0xec, 0x71, 0x8f, 0xe2, 0xa1, 0x4a, 0x7b, 0x11, 0x6f, 0xfa, 0x09, 0x24, 0x7f, 0x29, 0x8b,
	0xee, 0x29, 0x79, 0xe7, 0xf7, 0x3c, 0xcf, 0xbc, 0x33, 0xf3, 0xea, 0x93, 0xb0, 0x48, 0x08, 0x13,
	0x94, 0xb3, 0x93, 0xe2, 0x23, 0xea, 0x0a, 0x24, 0xc8, 0x87, 0x9c, 0xb0, 0x80, 0x64, 0x28, 0xc5,
	0x19, 0x4e, 0x04, 0x4c, 0x33, 0x2e, 0xb9, 0xe1, 0x6c, 0xcb, 0x61, 0x57, 0xc0, 0x4e, 0x3e, 0xbc,
	0x17, 0xf1, 0x88, 0x57, 0x62, 0x54, 0xfe, 0xd5, 0xbe, 0xa1, 0x15, 0x70, 0x91, 0x70, 0x81, 0x7c,
	0x2c, 0x08, 0x5a, 0xee, 0xfa, 0x44, 0xe2, 0x5d, 0x14, 0x70, 0xca, 0x5a, 0x1e, 0x71, 0x1e, 0xc5,
	0x04, 0x55, 0x95, 0x9f, 0xbf, 0x43, 0x61, 0x9e, 0x61, 0x59, 0x26, 0x57, 0x2b, 0xa3, 0xdf, 0x3d,
	0xbd, 0x3f, 0xaf, 0x1a, 0x31, 0x5e, 0xe9, 0xb7, 0x19, 0x97, 0x34, 0x20, 0x5e, 0x4a, 0x32, 0xca,
	0x43, 0xb3, 0xe7, 0x80, 0xf1, 0xcd, 0xbd, 0x07, 0xb0, 0x8e, 0x80, 0x6d, 0x04, 0x3c, 0x6c, 0x22,
	0xa6, 0xda, 0xf9, 0xca, 0x56, 0x4e, 0xbf, 0xdb, 0xc0, 0xbd, 0x55, 0x3b, 0xe7, 0x95, 0xd1, 0xf8,
	0x02, 0xf4, 0x47, 0x31, 0x5d, 0x12, 0x46, 0x84, 0xf0, 0x44, 0x8c, 0xc5, 0xc2, 0x4b, 0x28, 0xf3,
	0x92, 0x3c, 0x96, 0x34, 0x8d, 0x29, 0xc9, 0x4c, 0xd5, 0x01, 0xe3, 0x1b, 0x53, 0xb7, 0xf4, 0x7f,
	0x5b, 0xd9, 0x4f, 0x22, 0x2a, 0x17, 0xb9, 0x0f, 0x03, 0x9e, 0xa0, 0xe6, 0x3c, 0xf5, 0x67, 0x22,
	0xc2, 0xf7, 0x48, 0x16, 0x29, 0x11, 0xf0, 0x90, 0x04, 0x7f, 0x56, 0xb6, 0x53, 0xe0, 0x24, 0x3e,
	0x18, 0x5d, 0x0e, 0xef, 0x82, 0x47, 0xee, 0xb0, 0x65, 0xc7, 0x25, 0x3a, 0xa2, 0xec, 0xa8, 0x83,
	0xc6, 0x27, 0xa0, 0x3f, 0xfc, 0x47, 0x5f, 0xd8, 0x17, 0x3c, 0xce, 0x25, 0x31, 0xfb, 0xcd, 0x81,
	0xeb, 0xcd, 0x61, 0x79, 0xa7, 0xb0, 0xb9, 0x53, 0xf8, 0x92, 0x53, 0x36, 0x9d, 0x94, 0x0d, 0xff,
	0x5a, 0xd9, 0x8f, 0xaf, 0x48, 0x79, 0xc6, 0x13, 0x2a, 0x49, 0x92, 0xca, 0xc2, 0x35, 0x2f, 0xf7,
	0xf2, 0xa2, 0xd1, 0x18, 0x4f, 0xf5, 0x3b, 0x21, 0x15, 0x0b, 0xce, 0x78, 0xe6, 0xb5, 0x22, 0xf3,
	0xba, 0x03, 0xc6, 0xaa, 0x3b, 0x68, 0xc1, 0xeb, 0x66, 0xdd, 0xd8, 0xd3, 0xef, 0x77, 0x62, 0x21,
	0xb1, 0x24, 0x5e, 0x9e, 0x86, 0x58, 0x12, 0x53, 0xab, 0x0c, 0x77, 0x5b, 0x78, 0x5c, 0xb2, 0x37,
	0x15, 0x3a, 0xd0, 0x4e, 0xcf, 0x6c, 0xe5, 0xe7, 0x99, 0x0d, 0x66, 0xaa, 0x06, 0x06, 0x3b, 0x33,
	0x55, 0xbb, 0x36, 0xe8, 0xcf, 0x54, 0x6d, 0x67, 0xd0, 0x9b, 0xce, 0xcf, 0xd7, 0x16, 0xb8, 0x58,
	0x5b, 0xe0, 0xc7, 0xda, 0x02, 0x9f, 0x37, 0x96, 0x72, 0xb1, 0xb1, 0x94, 0xaf, 0x1b, 0x4b, 0x79,
	0xfb, 0x7c, 0xeb, 0x21, 0xfe, 0x33, 0xbf, 0xcb, 0x7d, 0x74, 0xb2, 0x35, 0xc4, 0xd5, 0xe3, 0xf8,
	0xfd, 0x6a, 0x36, 0xf6, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x08, 0xa2, 0xa6, 0x80, 0xf5, 0x02,
	0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NoticePeriod != that1.NoticePeriod {
		return false
	}
	if !this.LivenessSlashMinMultiplier.Equal(that1.LivenessSlashMinMultiplier) {
		return false
	}
	if !this.LivenessSlashMinAbsolute.Equal(&that1.LivenessSlashMinAbsolute) {
		return false
	}
	if this.DishonorLiveness != that1.DishonorLiveness {
		return false
	}
	if this.DishonorStateUpdate != that1.DishonorStateUpdate {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DishonorStateUpdate != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.DishonorStateUpdate))
		i--
		dAtA[i] = 0x40
	}
	if m.DishonorLiveness != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.DishonorLiveness))
		i--
		dAtA[i] = 0x38
	}
	{
		size, err := m.LivenessSlashMinAbsolute.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.LivenessSlashMinMultiplier.Size()
		i -= size
		if _, err := m.LivenessSlashMinMultiplier.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	n2, err2 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.NoticePeriod, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.NoticePeriod):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintParams(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.NoticePeriod)
	n += 1 + l + sovParams(uint64(l))
	l = m.LivenessSlashMinMultiplier.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.LivenessSlashMinAbsolute.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.DishonorLiveness != 0 {
		n += 1 + sovParams(uint64(m.DishonorLiveness))
	}
	if m.DishonorStateUpdate != 0 {
		n += 1 + sovParams(uint64(m.DishonorStateUpdate))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoticePeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.NoticePeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LivenessSlashMinMultiplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LivenessSlashMinMultiplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LivenessSlashMinAbsolute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LivenessSlashMinAbsolute.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DishonorLiveness", wireType)
			}
			m.DishonorLiveness = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DishonorLiveness |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DishonorStateUpdate", wireType)
			}
			m.DishonorStateUpdate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DishonorStateUpdate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
